# VU lower instructions

define pcodeop sin;
define pcodeop arctan;
define pcodeop exp;

:loi VI is microMode=1 & VI & vulop11_L=0x2FF & vucI_L=1 {
    *[register]:4 vuI = VI;
    goto inst_next;
}

CF: is epsilon {tmp:3 = *[register]:3 &vuCF_32; export tmp;}
MAC: is epsilon {tmp:2 = *[register]:2 &vuMAC_32; export tmp;}
STATUS: is epsilon {tmp:2 = *[register]:2 &vuStatus_32; tmp = tmp[0,12]; export tmp;}

with : microMode=1 & cUpper=0 {

    with : cE=0 {
        :b Rel11    is Rel11 & vulop7=0x20 & vuis=0 & vuit=0 & vudest=0 [cUpper=1; globalset(inst_next, cUpper);] {
            delayslot(3);
            goto Rel11;
        }

        :bal VUIT, Rel11    is vulop7=0x21 & Rel11 & vuis=0 & VUIT & vudest=0 [cUpper=1; globalset(inst_next, cUpper);] {
            VUIT = inst_start+16;
            delayslot(3);
            call Rel11;
        }

        :jalr VUIT, VUIS is vudest & vusimm11 & vulop7=0x25 & VUIT & VUIS [cUpper=1; globalset(inst_next, cUpper);] {
            VUIT = inst_start+16;
            delayslot(3);
            tmp:4 = $(BASE_CODE_ADDRESS) + zext(VUIS*8);
            call [tmp];
        }

        :jr VUIS is vudest & VUIT & vusimm11 & vulop7=0x24 & VUIS [cUpper=1; globalset(inst_next, cUpper);] {
            delayslot(3);
            tmp:4 = $(BASE_CODE_ADDRESS) + zext(VUIS*8);
            goto [tmp];
        }

        :jr VUIS is vudest & VUIS & vusimm11 & vulop7=0x24 & vuis=15 [cUpper=1; globalset(inst_next, cUpper);] {
            delayslot(3);
            return [VUIS];
        }
        :ibeq VUIT, VUIS, Rel11 is vudest=0 & vulop7=0x28 & VUIT & VUIS & Rel11 [cUpper=1; globalset(inst_next, cUpper);] {
            delayflag:1 = ( VUIS == VUIT );
            delayslot( 1 );
            if delayflag goto Rel11;
        }

        :ibgez VUIS, Rel11 is vudest=0 & vuit=0 & vulop7=0x2f & VUIS & Rel11 [cUpper=1; globalset(inst_next, cUpper);] {
            delayflag:1 = ( VUIS s>= 0:2 );
            delayslot( 1 );
            if delayflag goto Rel11;
        }

        :ibgtz VUIS, Rel11 is vudest=0 & vuit=0 & vulop7=0x2d & VUIS & Rel11 [cUpper=1; globalset(inst_next, cUpper);] {
            delayflag:1 = ( VUIS s> 0:2 );
            delayslot( 1 );
            if delayflag goto Rel11;
        }

        :iblez VUIS, Rel11 is vudest=0 & vuit=0 & vulop7=0x2e & VUIS & Rel11 [cUpper=1; globalset(inst_next, cUpper);] {
            delayflag:1 = ( VUIS s<= 0:2 );
            delayslot( 1 );
            if delayflag goto Rel11;
        }

        :ibltz VUIS, Rel11 is vudest=0 & vuit=0 & vulop7=0x2c & VUIS & Rel11 [cUpper=1; globalset(inst_next, cUpper);] {
            delayflag:1 = ( VUIS s< 0:2 );
            delayslot( 1 );
            if delayflag goto Rel11;
        }

        :ibne VUIT, VUIS, Rel11 is vudest=0 & vulop7=0x29 & VUIT & VUIS & Rel11 [cUpper=1; globalset(inst_next, cUpper);] {
            delayflag:1 = ( VUIS != VUIT );
            delayslot( 1 );
            if delayflag goto Rel11;
        }

        :ilw^sdest VUIT, VU_SDEST is vulop7=0x4 & VUIT & VU_SDEST & sdest [cUpper=1; globalset(inst_next, cUpper);] {
            VUIT = *:4 ($(BASE_DATA_ADDRESS)+VU_SDEST);
        }

        :ilwr^sdest VUIT, VU_SDEST is vusimm11 & vulop7=0x40 & vulop11=0x3fe & VUIT & VU_SDEST & sdest [cUpper=1; globalset(inst_next, cUpper);] {
            VUIT = *:4 ($(BASE_DATA_ADDRESS)+VU_SDEST);
        }

        :isw^sdest VUIT, vusimm11, VU_SDEST is vulop7=0x5 & VUIT & vusimm11 & VU_SDEST & sdest [cUpper=1; globalset(inst_next, cUpper);] {
            *:4 ($(BASE_DATA_ADDRESS)+VU_SDEST) = VUIT;
        }

        :iswr^sdest VUIT, VU_SDEST is vulop7=0x40 & vulop11=0x3ff & VUIT & VU_SDEST & sdest [cUpper=1; globalset(inst_next, cUpper);] {
            *:4 ($(BASE_DATA_ADDRESS)+VU_SDEST) = VUIT;
        }

        :lq^dest vuft, VU_OFF_BASE_IS is vulop7=0x0 & vuft & VU_OFF_BASE_IS & dest [cUpper=1; globalset(inst_next, cUpper);] {
            vuft = VULQ(dest, $(BASE_DATA_ADDRESS)+VU_OFF_BASE_IS);
        }

        :lqd^dest vuft, (--VUIS) is vusimm11 & vulop7=0x40 & vulop11=0x37e & vuft & VUIS & dest [cUpper=1; globalset(inst_next, cUpper);] {
            VUIS = VUIS - 1;
            offset:4 = $(BASE_DATA_ADDRESS)+zext(VUIS*16);
            vuft = VULQ(dest, offset);
        }

        :lqi^dest vuft, (VUIS++) is vulop7=0x40 & vulop11=0x37c & vuft & VUIS & dest [cUpper=1; globalset(inst_next, cUpper);] {
            offset:4 = $(BASE_DATA_ADDRESS)+zext(VUIS*16);
            vuft = VULQ(dest, offset);
            VUIS = VUIS + 1;
        }
        
        :sq^dest vufs, VU_OFF_BASE_IT is vulop7=0x1 & vufs & VU_OFF_BASE_IT & dest [cUpper=1; globalset(inst_next, cUpper);] {
            VUSQ(dest, $(BASE_DATA_ADDRESS)+VU_OFF_BASE_IT, vufs);
        }

        :sqd^dest vufs, (--VUIT) is vusimm11 & vulop7=0x40 & vulop11=0x37f & vufs & VUIT & dest [cUpper=1; globalset(inst_next, cUpper);] {
            VUIT = VUIT - 1;
            offset:4 = $(BASE_DATA_ADDRESS)+zext(VUIT*16);
            VUSQ(dest, offset, vufs);
        }

        :sqi^dest vufs, (VUIT++) is vulop7=0x40 & vulop11=0x37d & vufs & VUIT & dest [cUpper=1; globalset(inst_next, cUpper);] {
            offset:4 = $(BASE_DATA_ADDRESS)+zext(VUIT*16);
            VUSQ(dest, offset, vufs);
            VUIT = VUIT + 1;
        }

        :xgkick VUIS is vudest=0 & vuft=0 & vusimm11 & vulop7=0x40 & vulop11=0x6fc & VUIS & D2_TADR [cUpper=1; globalset(inst_next, cUpper);] {
            *:4 D2_TADR = $(BASE_DATA_ADDRESS) + zext(VUIS*8);
        }

        :xitop VUIT is vudest=0 & vuis=0 & vusimm11 & vulop7=0x40 & vulop11=0x6bd & VUIT & VIF1_ITOP [cUpper=1; globalset(inst_next, cUpper);] {
            tmp:2 = *:2 VIF1_ITOP;
            VUIT = tmp[0,10];
        }

        :xtop VUIT is vudest=0 & vulop11=0x6bc & vuis=0 & vusimm11 & vulop7=0x40 & VUIT & VIF1_TOP [cUpper=1; globalset(inst_next, cUpper);] {
            VUIT = *:2 VIF1_TOP;
        }
    }

    #ps2dev defines nop at move vf0,vf0
    :nop is vusimm11 & vulop7=0x40 & vulop11=0x33c & vuft=0 & vufs=0 & vudest=0 [cUpper=1; globalset(inst_next, cUpper);] {}
    :nop is immfloat=0 & vucI_L=0 {}

    :div Q, vufs^fsf, vuft^ftf is Q & vulop7=0x40 & vulop11=0x3bc & vufs & fsf & vuft & ftf [cUpper=1; globalset(inst_next, cUpper);] {
        build fsf;
        build ftf;
        vuStatus_32[5,1] = ((ftf f== 0) && (fsf f!= 0));
        Q = fsf f/ ftf;
    }

    :eatan P, vufs^fsf is P & vuftf=0 & vuft=0 & VUIT & vulop7=0x40 & vulop11=0x7fd & vufs & fsf [cUpper=1; globalset(inst_next, cUpper);] {
        build fsf;
        P = arctan(fsf);
    }

    :eatanxy P, vufs is P & vuft=0 & vulop7=0x40 & vudest=0xc & vulop11=0x77c & vufs [cUpper=1; globalset(inst_next, cUpper);] {
        P = arctan(vufs[32,32] f/ vufs[0,32]);
    }

    :eatanxz P, vufs is P & vuft=0 & vulop7=0x40 & vudest=0xa & vulop11=0x77d & vufs [cUpper=1; globalset(inst_next, cUpper);] {
        P = arctan(vufs[64,32] f/ vufs[0,32]);
    }

    :eexp P, vufs^fsf is P & vuftf=0 & vuft=0 & vulop7=0x40 & vulop11=0x7fe & vufs & fsf [cUpper=1; globalset(inst_next, cUpper);] {
        build fsf;
        P = exp(f- fsf);
    }

    :eleng P, vufs is P & vuft=0 & vulop7=0x40 & vudest=0xe & vulop11=0x73e & vufs [cUpper=1; globalset(inst_next, cUpper);] {
        ssum(vufs, P);
        P = sqrt(P);
    }

    :ercpr P, vufs^fsf is P & vuftf=0 & vuft=0 & VUIT & vulop7=0x40 & vulop11=0x7be & vufs & fsf [cUpper=1; globalset(inst_next, cUpper);] {
        build fsf;
        P = 1 f/ fsf;
    }

    :erleng P, vufs is P & vuft=0 & vulop7=0x40 & vudest=0xe & vulop11=0x73f & vufs [cUpper=1; globalset(inst_next, cUpper);] {
        ssum(vufs, P);
        P = 1 f/ sqrt(P);
    }

    :ersadd P, vufs is P & vuft=0 & vulop7=0x40 & vudest=0xe & vulop11=0x73d & vufs [cUpper=1; globalset(inst_next, cUpper);] {
        ssum(vufs, P);
        P = 1 f/ P;
    }

    :ersqrt P, vufs^fsf is P & vuftf=0 & vuft=0 & VUIT & vulop7=0x40 & vulop11=0x7bd & vufs & fsf [cUpper=1; globalset(inst_next, cUpper);] {
        build fsf;
        P = 1 f/ sqrt(fsf);
    }

    :esadd P, vufs is P & VUIT & vulop7=0x40 & vudest=0xe & vulop11=0x73c & vufs [cUpper=1; globalset(inst_next, cUpper);] {
        ssum(vufs, P);
    }

    :esin P, vufs^fsf is P & vuftf=0 & vuft=0 & VUIT & vulop7=0x40 & vulop11=0x7fc & vufs & fsf [cUpper=1; globalset(inst_next, cUpper);] {
        build fsf;
        P = sin(fsf);
    }

    :esqrt P, vufs^fsf is P & vuftf=0 & vuft=0 & VUIT & vulop7=0x40 & vulop11=0x7bc & vufs & fsf [cUpper=1; globalset(inst_next, cUpper);] {
        build fsf;
        P = sqrt(fsf);
    }

    :esum P, vufs is P & VUIT & vulop7=0x40 & vudest=0xf & vuft=0 & vulop11=0x77e & vufs [cUpper=1; globalset(inst_next, cUpper);] {
        P = vufs[0,32] f+ vufs[32,32] f+ vufs[64,32] f+ vufs[96,32];
    }

    :fcand vi1, vuimm24 is vuimm24 & vul24=0 & vulop7=0x12 & vi1 & CF [cUpper=1; globalset(inst_next, cUpper);] {
        tmp:3 = CF & vuimm24;
        vi1 = zext(tmp != 0);
    }

    :fceq vi1, vuimm24 is vuimm24 & vul24=0 & vulop7=0x10 & vi1 & CF [cUpper=1; globalset(inst_next, cUpper);] {
        vi1 = zext(CF == vuimm24);
    }

    :fcget VUIT is vudest=0 & vuoffset=0 & vulop7=0x1c & VUIT & CF [cUpper=1; globalset(inst_next, cUpper);] {
        VUIT = CF[0,12];
    }

    :fcor vi1, vuimm24 is vuimm24 & vulop7=0x13 & vi1 & vul24=0 & CF [cUpper=1; globalset(inst_next, cUpper);] {
        tmp:3 = CF | vuimm24;
        vi1 = zext(~tmp == 0);
    }

    :fcset vuimm24 is vuimm24 & vulop7=0x11 & vul24=0 [cUpper=1; globalset(inst_next, cUpper);] {
        *[register]:3 &vuCF_32 = vuimm24;
    }

    :fmand VUIT, VUIS is vudest=0 & vusimm11 & vulop7=0x1a & VUIT & VUIS & MAC [cUpper=1; globalset(inst_next, cUpper);] {
        VUIT = VUIS & MAC;
    }

    :fmeq VUIT, VUIS is vudest=0 & vusimm11 & vulop7=0x18 & VUIT & VUIS & MAC [cUpper=1; globalset(inst_next, cUpper);] {
        VUIT = zext(VUIS == MAC);
    }

    :fmor VUIT, VUIS is vudest=0 & vusimm11 & vulop7=0x1b & VUIT & VUIS & MAC [cUpper=1; globalset(inst_next, cUpper);] {
        VUIT = VUIS | MAC;
    }

    :fsand VUIT, vuimm12 is vul22_24=0 & vuis=0 & vulop7=0x16 & VUIT & vuimm12 & STATUS [cUpper=1; globalset(inst_next, cUpper);] {
        VUIT = STATUS & vuimm12;
    }

    :fseq VUIT, vuimm12 is vuis=0 & vul22_24=0 & vulop7=0x14 & VUIT & vuimm12 & STATUS [cUpper=1; globalset(inst_next, cUpper);] {
        VUIT = zext(STATUS == vuimm12);
    }

    :fsor VUIT, vuimm12 is vuis=0 & vul22_24=0 & vulop7=0x17 & VUIT & vuimm12 & STATUS [cUpper=1; globalset(inst_next, cUpper);] {
        VUIT = STATUS | vuimm12;
    }

    :fsset VU_IMM12_UP6 is vuis=0 &  vuit=0 & vul22_24=0 & vulop7=0x15 & VU_IMM12_UP6 [cUpper=1; globalset(inst_next, cUpper);] {
        *[register]:2 &vuStatus_32 = VU_IMM12_UP6;
    }

    :iadd VUID, VUIS, VUIT is vudest & vulop7=0x40 & vulop6=0x30 & VUID & VUIS & VUIT [cUpper=1; globalset(inst_next, cUpper);] {
        VUID = VUIS + VUIT;
    }

    :iaddi VUIT, VUIS, vuimm5 is vudest & vulop7=0x40 & vulop6=0x32 & VUIT & VUIS & vuimm5 [cUpper=1; globalset(inst_next, cUpper);] {
        VUIT = VUIS + vuimm5;
    }

    :iaddiu VUIT, VUIS, VU_IMM15 is vulop7=0x8 & VUIT & VUIS & VU_IMM15 [cUpper=1; globalset(inst_next, cUpper);] {
       VUIT = VUIS + VU_IMM15;
    }

    :iand VUID, VUIS, VUIT is vudest & vulop7=0x40 & vulop6=0x34 & VUID & VUIS & VUIT [cUpper=1; globalset(inst_next, cUpper);] {
        VUID = VUIS & VUIT;
    }

    :ior VUID, VUIS, VUIT is vudest & vulop7=0x40 & vulop6=0x35 & VUID & VUIS & VUIT [cUpper=1; globalset(inst_next, cUpper);] {
        VUID = VUIS | VUIT;
    }

    :isub VUID, VUIS, VUIT is vudest & vulop7=0x40 & vulop6=0x31 & VUID & VUIS & VUIT [cUpper=1; globalset(inst_next, cUpper);] {
        VUID = VUIS - VUIT;
    }

    :isubiu VUIT, VUIS, vuop_0_10 is vulop7=0x9 & VUIT & VUIS & vuop_0_10 [cUpper=1; globalset(inst_next, cUpper);] {
        # vuop_0_10 is imm15
        VUIT = VUIS - vuop_0_10;
    }

    :mfir^dest vuft, vuis is vusimm11 & vulop7=0x40 & vulop11=0x3fd & vuft & vuis & dest [cUpper=1; globalset(inst_next, cUpper);] {
        vuft = VMFIR(dest, vuis);
    }

    :mfp^dest vuft, P is P & VUIS & vusimm11 & vulop7=0x40 & vulop11=0x67c & vuft & dest [cUpper=1; globalset(inst_next, cUpper);] {
        vuft = VMOVEBC(dest, P);
    }

    :move^dest vuft, vufs is vusimm11 & vulop7=0x40 & vulop11=0x33c & vuft & vufs & dest [cUpper=1; globalset(inst_next, cUpper);] {
        vuft = VMOVE(dest, vufs);
    }

    :mr32^dest vuft, vufs is vusimm11 & vulop7=0x40 & vulop11=0x33d & vuft & vufs & dest [cUpper=1; globalset(inst_next, cUpper);] {
        vuft = VMR32(dest, vufs);
    }

    :mtir VUIT, vufs^fsf is vuftf=0 & vulop7=0x40 & vulop11=0x3fc & VUIT & vufs & fsf [cUpper=1; globalset(inst_next, cUpper);] {
        build fsf;
        VUIT = fsf:2;
    }

    :rget^dest vuft, "R" is VUIS & vusimm11 & vulop7=0x40 & vulop11=0x43d & vuft & dest [cUpper=1; globalset(inst_next, cUpper);] {}

    :rinit "R", vufs^fsf is vuftf=0 & vuft=0 & VUIT & vusimm11 & vulop7=0x40 & vulop11=0x43e & vufs & fsf [cUpper=1; globalset(inst_next, cUpper);] {
        build fsf;
        *[register]:3 vuR_32 = fsf[0,23];
    }

    :rnext^dest vuft, "R" is VUIS & vusimm11 & vulop7=0x40 & vulop11=0x43c & vuft & dest [cUpper=1; globalset(inst_next, cUpper);] {}

    :rsqrt Q, vufs^fsf, vuft^ftf is Q & vusimm11 & vulop7=0x40 & vulop11=0x3be & vufs & fsf & vuft & ftf [cUpper=1; globalset(inst_next, cUpper);] {
        build fsf;
        build ftf;
        vuStatus_32[4,1] = (ftf f< 0);
        vuStatus_32[10,1] = (vuStatus_32[10,1] || vuStatus_32[4,1]);
        vuStatus_32[5,1] = ((ftf f== 0) && (fsf f!= 0));
        vuStatus_32[11,1] = (vuStatus_32[11,1] || vuStatus_32[5,1]);
        Q = fsf f/ sqrt(ftf);
    }

    :rxor "R", vufs^fsf is vuftf=0 & vuft=0 & VUIT & vusimm11 & vulop7=0x40 & vulop11=0x43f & vufs & fsf [cUpper=1; globalset(inst_next, cUpper);] {
        build fsf;
        tmp:3 = *[register]:3 vuR_32;
        *[register]:3 vuR_32 = tmp[0,23] ^ fsf[0,23];
    }

    :"sqrt" Q, vuft^ftf is Q & vufsf=0 & VUIS & vusimm11 & vulop7=0x40 & vulop11=0x3bd & vuft & ftf [cUpper=1; globalset(inst_next, cUpper);] {
        build ftf;
        vuStatus_32[4,1] = (ftf f< 0);
        vuStatus_32[10,1] = (vuStatus_32[10,1] || vuStatus_32[4,1]);
        vuStatus_32[5,1] = 0:1;
        Q = sqrt(ftf);
    }

    :waitp is vulop7=0x40 & vudest=0 & vuft=0 & vufs=0 & vulop11=0x7bf [cUpper=1; globalset(inst_next, cUpper);] {}

    :waitq is vulop7=0x40 & vudest=0 & vuft=0 & vufs=0 & vulop11=0x3bf [cUpper=1; globalset(inst_next, cUpper);] {}

}